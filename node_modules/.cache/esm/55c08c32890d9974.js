let express,success,error,ApolloServer,gql,PORT,IN_PROD,DB,mongoose,typeDefs,resolvers,AppModels;_890‍.w("express",[["default",["express"],function(v){express=v}]]);_890‍.w("consola",[["success",["success"],function(v){success=v}],["error",["error"],function(v){error=v}]]);_890‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_890‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["DB",["DB"],function(v){DB=v}]]);_890‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_890‍.w("./graphql",[["typeDefs",["typeDefs"],function(v){typeDefs=v}],["resolvers",["resolvers"],function(v){resolvers=v}]]);_890‍.w("./models",[["*",null,function(v){AppModels=v}]]);







const app = express();

  
const server = new ApolloServer({
    typeDefs,
    resolvers,
    playground: IN_PROD,
    context: {
        ...AppModels
    }
})  


const startApp = async ()=> {
try {
    await mongoose.connect(DB, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        useFindAndModify: true
    });
    success({
        badge: true,
        message: 'Database conmected '
    })
    server.applyMiddleware({app})
    app.listen(PORT, ()=> success({ 
        message: `server started on port: ${PORT}`,
        badge: true
    }))
} catch (err) { 
    error({
        badge: true,
        message: err.message
    })
}
}

startApp();